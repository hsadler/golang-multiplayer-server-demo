

TODO:
    X sketch out game UX
    X sketch out API and data flow
    X sketch out backend game state and entity modeling
    X POC server deployment to cloud service and deployment process
    X breakup server into file components
    X add new stub message handlers to client
    X add new stub message handlers to server
    X add new client message classes to client
    X add new server message structs to server
    X finalize server models schemas
    X move server executable builds to a /build directory
    X refactor server to use new GameState struct as game model
    X add server logging control
    X finalize server message schemas
    X mock implement round end and new round start
    X refactor player enter position to be server authoritative
    X POC Unity game client conform to updated game server API:
        X client player enter/exit -> server
        X client player position -> server
        X server game state -> client
        X server player position -> client
    X BUG: move Player SOT to GameState, have Client hold PlayerId as a property
    X add mutex to GameState for reads and writes
    X implement players joining game, seeing each other's movement
    X BUG: client disconnections not properly handled by server
    X implement better GameState entity-map concurrency handling with a 
        ConcurrentMap datastructure using a RWMutex
    X implement basic Unity gameplay and architecture:
        X player enter name to join
        X player spawns at random location
        X food visible
        X mines visible
        X map walls block player
        X camera follows player
        X camera zoomable
    - implement full game features:
        - food respawning, consumption, and player size increase
        - player eat player and player respawn
        - name on player
        - map grid
        - time per round and game reset
        - winning player and other player ranking
    - styling
    - polish:
        - name entry UI scale with screen size

INVESTIGATE:
    - load testing client connections
    - performance testing golang server performance
    - performance testing websocket message latency
    - ping/pong needed for clients that start to fail
    - look into a proper logging library


/////////// GAME UX ///////////

1. player enters name to join active game
2. players eat food go grow bigger
3. bigger players can eat smaller players
4. players who are eaten respawn
5. players need to avoid mines which cause damage and therefor size decrease
6. each round has a time limit
7. at the end of each round, winner is declared and player's rank is displayed


/////////// MESSAGE API ///////////

Client Messages:
    CLIENT_MESSAGE_TYPE_PLAYER_ENTER
    CLIENT_MESSAGE_TYPE_PLAYER_EXIT
    CLIENT_MESSAGE_TYPE_PLAYER_POSITION
    CLIENT_MESSAGE_TYPE_PLAYER_EAT_FOOD
    CLIENT_MESSAGE_TYPE_PLAYER_EAT_PLAYER
    CLIENT_MESSAGE_TYPE_MINE_DAMAGE_PLAYER

Server Messages:
    SERVER_MESSAGE_TYPE_GAME_STATE
    SERVER_MESSAGE_TYPE_PLAYER_ENTER
    SERVER_MESSAGE_TYPE_PLAYER_EXIT
    SERVER_MESSAGE_TYPE_PLAYER_STATE_UPDATE
    SERVER_MESSAGE_TYPE_FOOD_STATE_UPDATE
    SERVER_MESSAGE_TYPE_MINE_STATE_UPDATE
    SERVER_MESSAGE_TYPE_SECONDS_TO_NEXT_ROUND_START
    SERVER_MESSAGE_TYPE_SECONDS_TO_CURRENT_ROUND_END
    SERVER_MESSAGE_TYPE_ROUND_RESULT


/////////// API PAYLOAD SCHEMAS ///////////

Message:
(Generic for all client and server messages)
{
    messageType: <string>,
    payload_key <string>: payload_value <any>
}


/////////// MODEL SCHEMAS ///////////

Game State:
{
    players: {<str_UUID>: <Player>, ...},
    foods: {<str_UUID>: <Food>, ...},
    mines: {<str_UUID>: <Mine>, ...},
    roundHistory: {<str_UUID>: <Round>, ...},
    roundCurrent: <Round>,
    roundInProgress: <bool>,
    secondsToCurrentRoundEnd: <int_sec>,
    secondsToNextRoundStart: <int_sec>
}

Round:
{
    id: <str_UUID>,
    playerIdToScore: {<str_UUID>: <int>, ...},
    timeStart: <int_unix_ts>,
    timeEnd: <int_unix_ts>
}

Player:
{
    id: <str_UUID>,
    active: <bool>,
    name: <string>,
    position: {
        x: <float>,
        y: <float>
    },
    size: <int>
}

Food:
{
    id: <str_UUID>,
    active: <bool>,
    position: {
        x: <float>,
        y: <float>
    },
}

Mine:
{
    id: <str_UUID>,
    active: <bool>,
    position: {
        x: <float>,
        y: <float>
    },
}
